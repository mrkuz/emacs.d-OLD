* Package manager / MELPA

Set up MELPA package repository.

#+BEGIN_SRC emacs-lisp :results none
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

* use-package

Install use-package to simplify package configuration.

#+BEGIN_SRC emacs-lisp :results none
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
;; Always ensures that packages are installed
(setq use-package-always-ensure t)
#+END_SRC

* Packages: Early

** Benchmark init

Banchmarks the init process. View results with ~benchmark-init/show-durations-tree~.

#+BEGIN_SRC emacs-lisp :results none
(use-package benchmark-init
  :config
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

** Miscellaneous

#+BEGIN_SRC emacs-lisp :results none
;; Get rid of minor modes in the modeline
(use-package diminish)
;; Keep ~/.emacs.d clean by using 'etc' and 'var' subdirectories
(use-package no-littering)

;; Set exec-path from PATH
(use-package exec-path-from-shell
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))
#+END_SRC

* General settings

** Miscellaneous

#+BEGIN_SRC emacs-lisp :results none
;; Set up initial frame position and size
(setq initial-frame-alist '((width . 100) (height . 50)))
;; Increase GC threshold
(setq gc-cons-threshold 80000000)
;; Disable backup files
(setq make-backup-files nil)
;; Disable auto save
(setq auto-save-default nil)
;; Don't load default init
(setq inhibit-default-init t)
;; Disable splash screen
(setq inhibit-splash-screen t)
;; Empty *scratch* buffer
(setq initial-scratch-message nil)
;; Always ask for y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)
;; Enable all disabled commands
(setq disabled-command-hook nil)
;; Disable bell
(setq ring-bell-function 'ignore)
;; Save bookmarks file after each bookmark
(setq bookmark-save-flag 1)
;; Show key binding suggestions for X seconds
(setq suggest-key-bindings 4)
;; Enable drag and drop text via mouse
(setq mouse-drag-and-drop-region t)
;; Automatically close parens
(electric-pair-mode 1)
;; Don't insert matching pair before non-whitespace characters
(setq-default electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
;; Set fill column
(setq-default fill-column 100)
;; Use bash as default shell
(setq explicit-shell-file-name "/bin/bash")
;; Ask before exiting emacs
(setq confirm-kill-emacs 'yes-or-no-p)
;; Store and switch through window configurations
(winner-mode 1)
;; Always follow links
(setq vc-follow-symlinks t)
;; Set up remember data file
(setq remember-data-file  "~/org/notes.org")
;; Set up diary file
(setq diary-file "~/org/diary")
;; Configure calendar holdays
(setq calendar-holidays (append holiday-general-holidays holiday-christian-holidays))
#+END_SRC

** Indention

#+BEGIN_SRC emacs-lisp :results none
;; Tab width
(setq-default tab-width 4)
;; Always use spaces
(setq-default indent-tabs-mode nil)
;; Set up tab stop list
(setq tab-stop-list '(0 tab-widht))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp :results none
;; Scroll to top and bottom when hit end
(setq-default scroll-error-top-bottom t)
;; Try to keep position when scrolling pages
(setq-default scroll-preserve-screen-position t)
;; Always scroll single line when cursor leaves visible area
;; (setq scroll-conservatively 10000)
;; Try to keep 5 lines visible when scrolling
(setq scroll-step 5)
#+END_SRC

** Calendar

#+BEGIN_SRC emacs-lisp :results none
;; Start week with monday
(setq calendar-week-start-day 1)
;; Use ISO date format
(setq calendar-date-style 'iso)
#+END_SRC

** File paths

#+BEGIN_SRC emacs-lisp :results none
;; Customization file
(setq custom-file (no-littering-expand-etc-file-name "custom"))
#+END_SRC

** Ediff

#+BEGIN_SRC emacs-lisp :results none
;; Use window instead of control frame
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; Compare side by side
(setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

* Look and feel

** Miscellaneous

#+BEGIN_SRC emacs-lisp :results none
;; Set font
(set-frame-font "DejaVu Sans Mono:size=14")
;; Disable toolbar
(tool-bar-mode 0)
;; Disable blinking cursor
(blink-cursor-mode 0)
;; Show column number in mode line
(column-number-mode 1)
;; Disable menu bar
(menu-bar-mode 0)
;; Disable scroll bar
(scroll-bar-mode 0)
;; No dialog boxes
(setq use-dialog-box nil)
;; Disable GTK tooltips
(setq x-gtk-use-system-tooltips nil)
;; Set left fringe width
(setq-default left-fringe-width 12)
;; Set right fringe width
(setq-default right-fringe-width 12)
;; Show line numbers in front of each row
(add-hook 'prog-mode-hook
          (lambda ()
            (display-line-numbers-mode)
            (set-face-attribute 'line-number-current-line nil :inherit 'default :foreground "#bbc2cf")))
;; Show only calendar week
(setq display-time-format " W%V")
;; Hide system load
(setq display-time-default-load-average nil)
;; Show date/time in modeline
(display-time-mode 1)
;; Show buffer name in frame title
(setq-default frame-title-format '("Emacs - %b"))
#+END_SRC

** Highlightning

#+BEGIN_SRC emacs-lisp :results none
;; Highlight current line
(global-hl-line-mode 1)
#+END_SRC

** Diminish

#+BEGIN_SRC emacs-lisp :results none
(diminish 'eldoc-mode)
(diminish 'abbrev-mode)
#+END_SRC

* Org mode

#+BEGIN_SRC emacs-lisp :results none
;; Load org-protocol
(require 'org-protocol)
;; Add CLOSED timestamp to DONE items
(setq org-log-done 'time)
;; Add tags immediate after the headline
(setq org-tags-column 0)
;; Don't indent lines after editing
(setq org-edit-src-content-indentation 0)
;; Don't ask for confirmation on evaluate
(setq org-confirm-babel-evaluate nil)
;; Insert log notes into drawer
(setq org-log-into-drawer t)
;; Set org directory
(setq org-directory "~/org")
;; Set the default file for notes
(setq org-default-notes-file (concat org-directory "/notes.org"))
;; Add all files in the org directory to the agenda
(setq org-agenda-files '("~/org" "~/org/mobile"))
;; (setq org-agenda-files (directory-files-recursively "~/org/" "\.org$"))
;; Include diary in agenda
(setq org-agenda-include-diary t)
;; Set archive file
(setq org-archive-location "~/org/.archive.org::* File: %s")
;; No header in archive file
(setq org-archive-file-header-format nil)
;; Enable auto-fill-mode
(add-hook 'org-mode-hook 'auto-fill-mode)
;; Diminish
(add-hook 'org-mode-hook (lambda () (diminish 'org-indent-mode)))
;; No blank lines before new entries
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
;; Custom templates
(add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp :results none\n?\n#+END_SRC"))
;; TODO keywords
(setq org-todo-keywords '((sequence "TODO" "WIP" "|" "DONE" "MOVED" "CANCELED")))
;; Custom capture templates
(setq org-capture-templates '(
    ("b" "Backlog" entry (file+olp "todo.org" "Backlog")
     "* TODO %:link%?" :prepend t)
    ("n" "Next" entry (file+olp "todo.org" "Next")
     "* TODO %?" :prepend t)
    ("t" "Todo" entry (file+function "todo.org" org-reverse-datetree-goto-read-date-in-file)
     "* TODO %?\nSCHEDULED: <%(org-read-date nil nil org-read-date-final-answer)>")
    ("N" "Note" entry (file+olp+datetree "notes.org")
     "** %<%H:%M> %:link%?")
    ("J" "Journal" entry (file+olp+datetree "journal.org")
     "** %<%H:%M> %?")
    ))
;; Allow setting refile targets as local file variable
(put 'org-refile-targets 'safe-local-variable (lambda (_) t))
;; Load language support
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . nil)
                               (shell . t)))
#+END_SRC

** org-present

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "~/.emacs.d/site-lisp/org-present")
(autoload 'org-present "org-present" nil t)
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+END_SRC

* Packages: Built-in

#+BEGIN_SRC emacs-lisp :results none
;; Keep track of recently opened files
(use-package recentf
  :after no-littering
  :config
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG")
  (add-to-list 'recentf-exclude ".*-autoloads\\.el")
  (recentf-mode 1))

;; Improved buffer switching
(use-package ibuffer
  :defer 1
  :config
  ;; Always use new window
  (setq ibuffer-use-other-window t)
  :bind (([remap list-buffers] . 'ibuffer)))

;; Enable code folding
(use-package hideshow
  :diminish hs-minor-mode
  :hook (prog-mode . hs-minor-mode))

;; Reuse dired buffer
(use-package dired
  :ensure nil
  :bind (:map dired-mode-map ([remap dired-find-file] . 'dired-find-alternate-file)))
#+END_SRC

* Packages: Spell checking

#+BEGIN_SRC emacs-lisp :results none
(use-package flyspell
  :commands flyspell-mode
  :config
  (unbind-key "C-;" flyspell-mode-map))

(use-package flyspell-correct-ivy
  :after flyspell ivy
  :bind (:map flyspell-mode-map ([remap flyspell-correct-word-before-point] . 'flyspell-correct-wrapper)))
#+END_SRC

* Packages: Utilities

** Miscellaneous

#+BEGIN_SRC emacs-lisp :results none
;; Try packages without installation
(use-package try
  :commands try)

;; Google thing-at-point
(use-package google-this
  :commands google-this)

;; Expands region step-by-step
(use-package expand-region
  :commands expand-region)

;; Activate multiple cursors
(use-package multiple-cursors
  :commands (mc/mark-all-like-this
             mc/mark-all-dwim
             mc/mark-next-like-this))

;; Allow hungry delete everywhere
(use-package hungry-delete
  :commands hungry-delete-backward
  :diminish hungry-delete-mode)

;; Underscore/upcase/camelcase conversion
(use-package string-inflection
  :commands string-inflection-all-cycle)

;; Move text like in org mode
(use-package move-text
  :defer 1
  :config
  (move-text-default-bindings))

;; Switch between frame configurations (like screen/tmux)
(use-package eyebrowse
  :defer 1
  :init
  ;; Use "C-c w" as prefix
  (setq eyebrowse-keymap-prefix "w")
  :config
  ;; Customize modeline display
  (setq eyebrowse-mode-line-left-delimiter "")
  (setq eyebrowse-mode-line-right-delimiter "")
  (setq eyebrowse-mode-line-separator " ")
  ;; Create a scratch buffer for new workspaces
  (setq eyebrowse-new-workspace 'my-create-scratch)
  (eyebrowse-mode))

;; Visit file as root
(use-package sudo-edit
  :commands sudo-edit)

;; Browse kill ring via popup
(use-package popup-kill-ring
  :commands popup-kill-ring)

;; Improved folding
(use-package fold-dwim
  :commands fold-dwim-toggle)

;; Simultaneous navigation and editing
(use-package broadcast
  :commands broadcast-mode)
#+END_SRC

** Undo tree

Stores undo history in a tree like structure and allows simple navigation through it.

Keybindings:

- =T=: Displays timestamp
- =D=: Show diff

#+BEGIN_SRC emacs-lisp :results none
;; Store undo history in tree structure
(use-package undo-tree
  :defer 1
  :diminish undo-tree-mode
  ;; Restore standard undo key binding, we use a custom one for this
  :bind (:map undo-tree-map ("C-x u" . 'undo))
  :config
  ;; Hide timestamps per default
  (setq undo-tree-visualizer-relative-timestamps nil)
  (global-undo-tree-mode))
#+END_SRC

** Terminal

#+BEGIN_SRC emacs-lisp :results none
(use-package multi-term
  :commands multi-term
  :bind ("C-c t" . 'multi-term)
  :hook (term-mode . (lambda () (setq-local global-hl-line-mode nil)))
  :config
  (add-to-list 'term-bind-key-alist '("C-c C-j" . term-line-mode))
  (add-to-list 'term-bind-key-alist '("C-c C-k" . term-char-mode)))
#+END_SRC

* Packages: Ivy

#+BEGIN_SRC emacs-lisp :results none
(use-package ivy
  :defer 1
  :diminish ivy-mode
  :config
  ;; Show recent M-x commands first
  (use-package smex)
  ;; Enable fuzzy matching
  (use-package flx)
  ;; Use fuzzy matching everywhere, except for swiper
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  ;; Add recent files and bookmarks to buffer list
  (setq ivy-use-virtual-buffers t)
  (setq magit-completing-read-function 'ivy-completing-read)
  (setq projectile-completion-system 'ivy)
  (ivy-mode 1))

(use-package ivy-hydra
  :after ivy)

(use-package counsel
  :after ivy
  :diminish counsel-mode
  :config
  (counsel-mode 1))

(use-package ivy-rich
  :after ivy
  :config
  (ivy-rich-mode 1))

#+END_SRC

* Packages: Help

#+BEGIN_SRC emacs-lisp :results none
;; Show available key bindings based on your current input
(use-package which-key
  :defer 1
  :diminish which-key-mode
  :config
  (which-key-mode 1))
#+END_SRC

* Packages: Navigation

#+BEGIN_SRC emacs-lisp :results none

;; Jump to a word/line by using a single character
(use-package ace-jump-mode
  :commands (ace-jump-word-mode ace-jump-line-mode))

;; Jump to a window by using a single character
(use-package ace-window
  :commands ace-windw
  :config
  ;; Use letters instead of numbers
  (setq aw-keys '(?a ?b ?c ?d ?e ?f ?g ?h)))

;; Go to last change
(use-package goto-last-change
  :defer 1)

;; Visit a link by using a single character
(use-package ace-link
  :commands ace-link)

;; Jump to definition at point
(use-package dumb-jump
  :commands dumb-jump-go)

;; Visual bookmarks
(use-package bm
  :bind (("<f2>" . bm-next)
         ("S-<f2>" . bm-previous)
         ("C-<f2>" . bm-toggle))
)
#+END_SRC

* Packages: Search

#+BEGIN_SRC emacs-lisp :results none
;; Show number of matches in modeline
(use-package anzu
  :defer 1
  :diminish anzu-mode
  :custom-face (anzu-mode-line ((t (nil :weight 'normal :foreground "white"))))
  :bind (([remap query-replace] . 'anzu-query-replace)
	 ([remap query-replace-regexp] . 'anzu-query-replace-regexp)
	 :map isearch-mode-map
	 ([remap isearch-query-replace]  . 'anzu-isearch-query-replace)
	 ([remap isearch-query-replace-regexp] . 'anzu-isearch-query-replace-regexp))
  :config
  (global-anzu-mode 1))

;; Frontend to ag
(use-package ag
  :commands ag)
#+END_SRC

* Packages: Look and feel

#+BEGIN_SRC emacs-lisp :results none

;; Icon collection
(use-package all-the-icons)

;; Doom theme
(use-package doom-themes
  :after all-the-icons
  :config
  (load-theme 'doom-one 1)
  ;; Theme treemacs
  (doom-themes-treemacs-config))

;; Doom modeline
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  ;; Set width of modeline bar
  (setq doom-modeline-bar-width 2)
  ;; Set modeline height
  (setq doom-modeline-height 20)
  ;; Don't use icons
  (setq doom-modeline-icon nil)
  ;; Show minor modes
  (setq doom-modeline-minor-modes t)

  ;; Hack: Overwrite function make bar invisible and force the configured height
  (defun doom-modeline-refresh-bars (&optional width height)
    (setq doom-modeline--bar-active
          (doom-modeline--make-xpm 'doom-modeline-bar
                                   (or width doom-modeline-bar-width)
                                   (or height doom-modeline-height))
          doom-modeline--bar-inactive
          (doom-modeline--make-xpm 'doom-modeline-bar
                                   (or width doom-modeline-bar-width)
                                   (or height doom-modeline-height))))

  ;; Customize modeline
  (doom-modeline-def-modeline 'my-modeline
    '(bar workspace-name window-number modals matches buffer-info remote-host selection-info)
    '(buffer-position objed-state misc-info persp-name debug lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))
  (add-hook 'doom-modeline-mode-hook (lambda () (doom-modeline-set-modeline 'my-modeline 'default))))

;; Highlight surrounding parens
(use-package highlight-parentheses
  :defer 1
  :diminish highlight-parentheses-mode
  :config
  ;; Customize color
  (setq hl-paren-colors '("IndianRed1"))
  ;; Highlight parens right before cursor
  (setq hl-paren-highlight-adjacent t)
  (global-highlight-parentheses-mode))

;; Tree layout explorer
(use-package treemacs
  :commands treemacs
  :hook (treemacs-mode . (lambda () (setq mode-line-format "")))
  :bind (:map treemacs-mode-map ([mouse-1] . 'treemacs-single-click-expand-action))
  :config
  ;; Use python 3
  (setq treemacs-python-executable (executable-find "python3"))
  ;; Customize face of root item
  (set-face-attribute 'treemacs-root-face nil :height 1.0 :underline nil)
  ;; Customize root icon
  (setq treemacs-icon-root-png
    (concat " "
		(all-the-icons-octicon "repo" :v-adjust -0.1 :height 1.2 :face 'font-lock-string-face)
                " "))
  ;; Collapse directories
  (setq treemacs-collapse-dirs 10)
  ;; Set window width
  (setq treemacs-width 30)
  ;; Exclude from 'other window' operations
  (setq treemacs-is-never-other-window t)
  ;; Path to persistance file
  (setq treemacs-persist-file (no-littering-expand-var-file-name "treemacs-persist")))
#+END_SRC

* Packages: Startup

#+BEGIN_SRC emacs-lisp :results none
;; Show dashboard on start
(use-package dashboard
  :config
  ;; Configure dashobard items
  (setq dashboard-items '((recents . 5) (bookmarks . 5) (projects . 5) (agenda . 5)))
  (setq dashboard-set-footer nil)
  (dashboard-setup-startup-hook))
#+END_SRC

* Packages: Projects

#+BEGIN_SRC emacs-lisp :results none
;; Group files into projects
(use-package projectile
  :defer 1
  :diminish projectile-mode
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (projectile-global-mode)
  ;; Ignore buffers starting with *
  (setq projectile-globally-ignored-buffers '("\\*.*")))

;; Add projectile support to treemacs
(use-package treemacs-projectile
  :after treemacs projectile)
#+END_SRC

* Packages: Auto-completion

#+BEGIN_SRC emacs-lisp :results none
;; Provides auto-completion
(use-package company
  :defer 1
  :diminish company-mode
  :bind (:map company-active-map
              ("M-f" . 'company-flx-mode)
              ("C-n" . 'company-select-next)
              ("C-p" . 'company-select-previous))
  :config
  (global-company-mode 1)
  ;; Provide completion after 1 character
  (setq company-minimum-prefix-length 1)
  ;; Show completion after short delay
  (setq company-idle-delay 0.4)
  ;; Show numbers to select completion
  (setq company-show-numbers t))

;; Fuzzy matching for company
(use-package company-flx
  :after company)

;; Show quick help next to completion
(use-package company-quickhelp
  :after company
  :hook (company-mode . company-quickhelp-mode)
  :config
  ;; Configure delay util help is shown
  (setq company-quickhelp-delay 1.2)
  ;; Limit nubmer of lines
  (setq company-quickhelp-max-lines 20)
  ;; Allow colors and fonts
  (setq company-quickhelp-use-propertized-text t))
#+END_SRC

* Packages: Snippets

#+BEGIN_SRC emacs-lisp :results none
;; Code and text snippets
(use-package yasnippet
  :defer 1
  :diminish yas-minor-mode
  :config
  ;; Inhibit messages at startup
  (setq yas-verbosity 1)
  ;; Prevent expansion in the middle of a text
  (setq-default yas-buffer-local-condition '(looking-at "[[:space:]\n]"))
  (yas-global-mode 1))

;; Snippet collection
(use-package yasnippet-snippets
  :after yasnippet)

#+END_SRC

* Packages: Git

#+BEGIN_SRC emacs-lisp :results none

;; Show changes in fringe
(use-package git-gutter
  :defer 1
  :diminish git-gutter-mode
  :config
  (setq git-gutter:modified-sign "│")
  (setq git-gutter:deleted-sign "│")
  (setq git-gutter:added-sign "│")
  (global-git-gutter-mode +1))

;; Git fronted
(use-package magit
  :commands magit-status
  :hook (after-save . magit-after-save-refresh-status)
  :bind ("C-c g" . 'magit-status))

;; Git timemachine
(use-package git-timemachine
  :commands git-timemachine)
#+END_SRC

* Packages: Development

** Flycheck

#+BEGIN_SRC emacs-lisp :results none
;; On-the-fly syntax checking
(use-package flycheck
  :diminish flycheck-mode
  :commands flycheck-mode
  :config
  ;; Check on save and when mode gets enabled
  (setq flycheck-check-syntax-automatically '(save mode-enabled)))

;; Show flycheck errors as tooltip
(use-package flycheck-pos-tip
  :after flycheck
  :config
  (flycheck-pos-tip-mode))
#+END_SRC

** REST client

#+BEGIN_SRC emacs-lisp :results none
;; REST client
(use-package restclient
  :mode ("\\.rest\\'" . restclient-mode)
  :commands restclient-mode)

;; Org mode integration
(use-package ob-restclient
  :after restclient)

;; Company support
(use-package company-restclient
  :after restclient company
  :config
  (add-to-list 'company-backends 'company-restclient))
#+END_SRC

* Packages: Live previews

#+BEGIN_SRC emacs-lisp :results none

;; Simple HTTP server used for live preview
(use-package simple-httpd
  :config
  (setq httpd-port 7070)
  (setq httpd-host (system-name)))

;; Live preview
(use-package impatient-mode
  :commands impatient-mode)

#+END_SRC

* Packages: Markdown

#+BEGIN_SRC emacs-lisp :results none

;; Pandoc integration
(use-package pandoc-mode
  :commands pandoc-mode)

(use-package markdown-mode
  :mode ("\\.md\\'" . gfm-mode)
  :commands (markdown-mode gfm-mode)
  :config
  (setq markdown-command "pandoc -t html5"))

#+END_SRC

* Packages: Databases

** MongoDB

#+BEGIN_SRC emacs-lisp :results none
;; MongoDB shell
(use-package inf-mongo
  :commands inf-mongo
  :config
  (setq inf-mongo-command "mongo mongodb://127.0.1:27017"))

;; Org mode integration
(use-package ob-mongo
  :defer t)
#+END_SRC

* Packages: Org

#+BEGIN_SRC emacs-lisp :results none
;; Provides reverse date trees
(use-package org-reverse-datetree
  :defer 1
  :config
  ;; Customize defaut date tree format
  (setq org-reverse-datetree-date-format "%Y-%m-%d %A")
  (setq org-reverse-datetree-week-format "%Y-%m KW%V")
  (setq org-reverse-datetree-year-format "%Y"))

;; Kanban board
(use-package org-kanban
  :defer 1)

;; Reveal.js
(use-package ox-reveal
  :after ox
  :config
  (setq org-reveal-root "file:///home/markus/opt/reveal.js/"))

;; Hugo exporter
(use-package ox-hugo
  :after ox)

;; Show header-line with current org heading
(use-package org-sticky-header
  :hook (org-mode . org-sticky-header-mode)
  :config
  (setq org-sticky-header-always-show-header nil)
  (setq org-sticky-header-full-path 'full)
  (setq org-sticky-header-outline-path-separator " > "))

;; Org bullets
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+END_SRC

* Packages: Web

#+BEGIN_SRC emacs-lisp :results none
;; Autocompletion for web mode
(use-package company-web
  :defer 1
  :config
  (add-to-list 'company-backends 'company-web-html))
#+END_SRC

* Packages: Miscellaneous modes

#+BEGIN_SRC emacs-lisp :results none

;; PlantUML integration
(use-package plantuml-mode
  :commands plantuml-mode
  :config
  (setq plantuml-jar-path "~/opt/plantuml/plantuml.jar")
  (setq org-plantuml-jar-path plantuml-jar-path))

;; Groovy programming
(use-package groovy-mode
  :commands groovy-mode
  :mode (("\\.groovy\\'" . groovy-mode)
         ("\\.gradle\\'" . groovy-mode)))

;; Colorize color codes in buffer
(use-package rainbow-mode
  :diminish rainbow-mode
  :commands rainbow-mode)

;; Protobuf
(use-package protobuf-mode
  :commands protobuf-mode
  :mode (("\\.proto\\'" . protobuf-mode)))

;; Yaml
(use-package yaml-mode
  :commands yaml-mode
  :mode (("\\.yaml\\'" . yaml-mode)
         ("\\.yml\\'" . yaml-mode)))

;; Dockerfile
(use-package dockerfile-mode
  :commands dockerfile-mode
  :mode (("Dockerfile\\'" . dockerfile-mode)))

;; Docker compose files
(use-package docker-compose-mode
  :commands docker-compose-mode
  :mode (("docker-compose.yaml\\'" . docker-compose-mode)
         ("docker-compose.yml\\'" . docker-compose-mode)))

;; Docker integration
(use-package docker
  :commands docker)
#+END_SRC

* Global keybinding

#+BEGIN_SRC emacs-lisp :results none
(setq my-map (make-sparse-keymap))
(global-set-key (kbd "C-;") my-map)
(global-set-key (kbd "C-ö") my-map)

(define-key my-map (kbd "M-c") 'string-inflection-lower-camelcase)
(define-key my-map (kbd "M-C") 'string-inflection-camelcase)
(define-key my-map (kbd "M-l") 'string-inflection-kebab-case)
(define-key my-map (kbd "M-u") 'string-inflection-underscore)
(define-key my-map (kbd "M-U") 'string-inflection-upcase)
(define-key my-map (kbd "M-x") 'string-inflection-all-cycle)
(define-key my-map (kbd "b") 'broadcast-mode)
(define-key my-map (kbd "c") 'flyspell-mode)
(define-key my-map (kbd "D l") 'desktop-read)
(define-key my-map (kbd "D s") 'desktop-save-in-desktop-dir)
(define-key my-map (kbd "f c") (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
(define-key my-map (kbd "f j") (lambda () (interactive) (find-file (concat org-directory "/journal.org"))))
(define-key my-map (kbd "f s") 'my-create-scratch)
(define-key my-map (kbd "f n") (lambda () (interactive) (find-file (concat org-directory "/notes.org"))))
(define-key my-map (kbd "f t") (lambda () (interactive) (find-file (concat org-directory "/todo.org"))))
(define-key my-map (kbd "g d") 'git-gutter:popup-hunk)
(define-key my-map (kbd "g g") 'magit-file-dispatch)
(define-key my-map (kbd "g G") 'magit-dispatch)
(define-key my-map (kbd "g n") 'git-gutter:next-hunk)
(define-key my-map (kbd "g p") 'git-gutter:previous-hunk)
(define-key my-map (kbd "g r") 'git-gutter:revert-hunk)
(define-key my-map (kbd "g t") 'git-gutter:toggle)
(define-key my-map (kbd "G") 'google-this)
(define-key my-map (kbd "j a") 'ace-link-addr)
(define-key my-map (kbd "j i") 'imenu)
(define-key my-map (kbd "j j") 'ace-jump-word-mode)
(define-key my-map (kbd "j l") 'ace-jump-line-mode)
(define-key my-map (kbd "j p") 'goto-last-change)
(define-key my-map (kbd "j w") 'ace-window)
(define-key my-map (kbd "k i") 'org-kanban/initialize)
(define-key my-map (kbd "k p") 'org-kanban/prev)
(define-key my-map (kbd "k n") 'org-kanban/next)
(define-key my-map (kbd "L") 'emacs-lock-mode)
(define-key my-map (kbd "m d") 'mc/mark-all-dwim)
(define-key my-map (kbd "m a") 'mc/mark-all-like-this)
(define-key my-map (kbd "m n") 'mc/mark-next-like-this)
(define-key my-map (kbd "o a") 'org-agenda)
(define-key my-map (kbd "o c") 'org-capture)
(define-key my-map (kbd "o l") 'org-store-link)
(define-key my-map (kbd "R") (lambda () (interactive ) (org-babel-load-file "~/.emacs.d/config.org")))
(define-key my-map (kbd "s i") 'company-yasnippet)
(define-key my-map (kbd "s t") 'yas-describe-tables)
(define-key my-map (kbd "S") 'swiper)
(define-key my-map (kbd "t t") 'treemacs)
(define-key my-map (kbd "t p") 'treemacs-add-and-display-current-project)
(define-key my-map (kbd "t o") 'treemacs-select-window)
(define-key my-map (kbd "u") 'undo-tree-visualize)
(define-key my-map (kbd "v c") 'rainbow-mode)
(define-key my-map (kbd "v l") 'my-toggle-truncate-line)
(define-key my-map (kbd "v u") 'goto-address-mode)
(define-key my-map (kbd "v w") 'whitespace-mode)
(define-key my-map (kbd "x") 'er/expand-region)
(define-key my-map (kbd "y") 'popup-kill-ring)
(define-key my-map (kbd ".") 'dumb-jump-go)
(define-key my-map (kbd ",") 'dumb-jump-back)
(define-key my-map (kbd "DEL") 'hungry-delete-backward)
(define-key my-map (kbd "SPC") 'company-complete)
(define-key my-map (kbd "TAB") 'fold-dwim-toggle)
(define-key my-map (kbd "?") 'which-key-show-top-level)
(define-key my-map (kbd "1") 'eyebrowse-switch-to-window-config-1)
(define-key my-map (kbd "2") 'eyebrowse-switch-to-window-config-2)
(define-key my-map (kbd "3") 'eyebrowse-switch-to-window-config-3)
(define-key my-map (kbd "4") 'eyebrowse-switch-to-window-config-4)
(define-key my-map (kbd "5") 'eyebrowse-switch-to-window-config-5)
(define-key my-map (kbd "6") 'eyebrowse-switch-to-window-config-6)
(define-key my-map (kbd "7") 'eyebrowse-switch-to-window-config-7)
(define-key my-map (kbd "8") 'eyebrowse-switch-to-window-config-8)
(define-key my-map (kbd "9") 'eyebrowse-switch-to-window-config-9)
#+END_SRC

* Custom functions

#+BEGIN_SRC emacs-lisp :results none
(defun my-toggle-truncate-line ()
  "Toggle trunacte line."
  (interactive)
  (setq truncate-lines (if (not truncate-lines) t nil)))

(defun my-create-scratch ()
  "Create a new scratch buffer."
  (interactive)
  (let ((scratch (generate-new-buffer "*scratch*")))
    (switch-to-buffer scratch)
    (funcall initial-major-mode)
    scratch))

(defun my-prepare-diff ()
  "Prepare two buffers for diff."
  (interactive)
  (let ((a (generate-new-buffer "*A*"))
        (b (generate-new-buffer "*B*")))
    (delete-other-windows)
    (switch-to-buffer a)
    (split-window-horizontally)
    (switch-to-buffer-other-window b)
    (other-window 1)))

(defun my-markdown-filter (buffer)
  (princ
   (with-temp-buffer
     (let ((tmp (buffer-name)))
       (set-buffer buffer)
       (set-buffer (markdown tmp))
       (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\"/>
<body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
   (current-buffer)))

(defun my-markdown-preview ()
  "Preview markdown."
  (interactive)
  (unless (process-status "httpd")
    (httpd-start))
  (impatient-mode)
  (imp-set-user-filter 'my-markdown-filter)
  (imp-visit-buffer))

(defun my-org-html-filter (buffer)
  (princ
   (with-temp-buffer
     (insert-buffer-substring buffer)
     (shell-command-on-region (point-min) (point-max) "pandoc -s -f org -t html5" nil t)
     (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\"/>
<body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string)))
   (current-buffer)))

(defun my-org-html-preview ()
  "Preview org buffer as HTML."
  (interactive)
  (unless (process-status "httpd")
    (httpd-start))
  (impatient-mode)
  (imp-set-user-filter 'my-org-html-filter)
  (imp-visit-buffer))

(defun my-org-protocol-capture-hook ()
  (let ((name (cdr (assoc 'name (frame-parameters)))))
    (when (equal name "org-protocol-capture")
      (delete-other-windows)
      (select-frame-set-input-focus (selected-frame)))))

(defun my-org-protocol-after-capture-hook ()
  (let ((name (cdr (assoc 'name (frame-parameters)))))
    (when (equal name "org-protocol-capture")
      (delete-frame))))

(add-hook 'org-capture-mode-hook 'my-org-protocol-capture-hook)
(add-hook 'org-capture-after-finalize-hook 'my-org-protocol-after-capture-hook)
#+END_SRC

* Fixes

#+BEGIN_SRC emacs-lisp :results none
(require 'ansi-color)
(defun my-colorize-compilation ()
  "Colorize compilation output."
  (ansi-color-apply-on-region compilation-filter-start (point)))

(add-hook 'compilation-filter-hook 'my-colorize-compilation)
#+END_SRC
* Start server

#+BEGIN_SRC emacs-lisp :results none
(require 'server)
(unless (server-running-p) (server-start))
#+END_SRC
* Personal information / Email

#+BEGIN_SRC emacs-lisp :results none
(setq user-full-name "Markus")
(setq user-mail-address "markus@bitsandbobs.net")
(setq smtpmail-smtp-user user-mail-address)
(setq send-mail-function 'smtpmail-send-it)
(setq smtpmail-smtp-server "smtp.gmail.com")
(setq smtpmail-stream-type 'ssl)
(setq smtpmail-smtp-service 465)
#+END_SRC
